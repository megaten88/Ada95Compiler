package a95compiler;
/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.flex</tt>
 */
class FlexLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\15\1\51\1\51\1\16\22\0\1\4\1\0\1\17\5\0"+
    "\1\7\1\10\1\21\1\20\1\5\1\11\1\1\1\22\12\14\1\3"+
    "\1\2\1\27\1\6\1\27\2\0\1\30\1\46\1\45\1\24\1\26"+
    "\1\37\1\36\1\47\1\34\2\13\1\40\1\13\1\31\1\23\1\44"+
    "\1\13\1\25\1\43\1\35\1\41\1\13\1\50\1\32\2\13\4\0"+
    "\1\12\1\0\1\30\1\46\1\45\1\24\1\26\1\37\1\36\1\47"+
    "\1\34\2\13\1\40\1\13\1\31\1\23\1\44\1\13\1\25\1\43"+
    "\1\35\1\41\1\13\1\50\1\32\2\13\12\0\1\51\252\0\2\33"+
    "\115\0\1\42\u1ea8\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\4\1\1\1\11\2\14"+
    "\3\12\1\15\1\12\1\1\5\12\1\1\5\12\2\16"+
    "\1\17\1\15\1\20\1\0\1\12\2\0\1\21\10\12"+
    "\1\22\1\23\1\24\1\22\1\23\1\24\6\12\1\0"+
    "\7\12\1\25\1\26\1\12\1\27\1\0\1\12\1\0"+
    "\1\12\1\30\2\12\2\0\1\12\1\31\1\32\3\12"+
    "\1\0\2\12\1\33\1\0\4\12\2\34\1\35\1\0"+
    "\1\35\1\12\1\0\1\36\2\0\1\37\1\0\1\12"+
    "\1\40\1\0\1\12\2\41\1\0\1\12\1\42\1\12"+
    "\2\43\1\12\2\0\1\44\1\12\1\0\1\12\2\45"+
    "\1\46\1\0\1\12\1\47\2\0\1\12\1\50\1\12"+
    "\1\0\1\12\1\51\1\0\2\12\2\52\2\53\1\12"+
    "\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\124\0\176\0\124\0\124\0\250"+
    "\0\124\0\124\0\322\0\374\0\u0126\0\u0150\0\u017a\0\124"+
    "\0\124\0\250\0\u01a4\0\u01ce\0\u01f8\0\250\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\124\0\124\0\124\0\124"+
    "\0\u046e\0\u0498\0\u04c2\0\u017a\0\124\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\124\0\124"+
    "\0\u0666\0\374\0\374\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\u04c2\0\374\0\u08dc\0\374\0\u0906\0\u0930\0\u095a"+
    "\0\u0984\0\374\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\374"+
    "\0\374\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\374"+
    "\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\124\0\374\0\124"+
    "\0\u0c4e\0\374\0\u0c78\0\u0ca2\0\374\0\u0ccc\0\u0cf6\0\374"+
    "\0\u0d20\0\u0d4a\0\374\0\u0d74\0\u0d9e\0\124\0\374\0\u0dc8"+
    "\0\u0df2\0\374\0\u0e1c\0\124\0\374\0\u0e46\0\u0e70\0\u0e9a"+
    "\0\124\0\u0ec4\0\u0eee\0\u0f18\0\124\0\374\0\374\0\u0f42"+
    "\0\u0f6c\0\124\0\u0f96\0\u0fc0\0\u0fea\0\124\0\u1014\0\u103e"+
    "\0\u1068\0\124\0\u1092\0\u10bc\0\u10e6\0\124\0\u08b2\0\124"+
    "\0\374\0\u1110\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\3\1\14\1\15\1\16\1\6\1\17\1\20"+
    "\1\21\1\22\1\23\1\14\1\24\1\25\1\26\1\14"+
    "\1\27\1\14\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\14\1\36\1\37\1\40\1\41\1\42\1\14\1\43"+
    "\1\0\15\6\1\44\1\45\32\6\61\0\1\46\51\0"+
    "\1\47\54\0\1\50\52\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\6\14\1\0\6\14\2\0"+
    "\1\53\12\0\1\15\53\0\1\6\37\0\1\54\6\0"+
    "\2\54\2\0\1\55\3\0\4\54\1\0\3\54\1\0"+
    "\6\54\1\0\6\54\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\5\14\1\56\1\0\6\14"+
    "\13\0\1\51\1\14\1\52\6\0\3\14\1\57\1\0"+
    "\3\14\1\0\6\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\1\14\1\60\1\61\1\0"+
    "\4\14\1\62\1\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\1\63\2\14\1\64\1\0\3\14\1\0"+
    "\5\14\1\65\1\0\6\14\32\0\1\66\5\0\1\67"+
    "\2\0\2\70\20\0\1\51\1\14\1\52\6\0\4\14"+
    "\1\0\1\14\1\71\1\14\1\0\3\14\1\72\2\14"+
    "\1\70\1\73\5\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\6\14\1\0\4\14\1\74"+
    "\1\14\13\0\1\51\1\14\1\52\6\0\3\14\1\75"+
    "\1\0\3\14\1\0\6\14\1\0\6\14\13\0\1\51"+
    "\1\14\1\52\6\0\1\76\3\14\1\0\1\77\2\14"+
    "\1\0\5\14\1\100\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\1\101\3\14\1\0\3\14\1\0\6\14"+
    "\1\0\6\14\36\0\1\102\26\0\1\51\1\14\1\52"+
    "\6\0\4\14\1\0\3\14\1\0\1\14\1\103\4\14"+
    "\1\0\6\14\13\0\1\51\1\14\1\52\6\0\2\14"+
    "\1\104\1\14\1\0\3\14\1\0\5\14\1\105\1\0"+
    "\6\14\13\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\1\106\2\14\1\0\6\14\1\0\6\14\13\0\1\51"+
    "\1\14\1\52\6\0\3\14\1\107\1\0\3\14\1\0"+
    "\6\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\6\14\1\0\4\14\1\110"+
    "\1\14\17\0\1\45\46\0\2\111\6\0\4\111\1\0"+
    "\3\111\1\0\6\111\1\0\6\111\14\0\2\52\6\0"+
    "\4\52\1\0\3\52\1\0\6\52\1\0\6\52\15\0"+
    "\1\112\47\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\1\14\1\113\4\14\1\0\6\14\13\0"+
    "\1\51\1\14\1\52\6\0\4\14\1\0\3\14\1\0"+
    "\1\14\1\114\4\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\1\14\1\115\2\14\1\0\3\14\1\0"+
    "\6\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\116\1\117\5\14\1\0\6\14"+
    "\13\0\1\51\1\14\1\52\6\0\4\14\1\0\3\14"+
    "\1\0\6\14\1\120\1\121\5\14\13\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\3\14\1\0\1\14\1\122"+
    "\4\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\6\14\1\0\5\14\1\123"+
    "\13\0\1\51\1\14\1\52\6\0\4\14\1\0\3\14"+
    "\1\0\4\14\1\124\1\14\1\0\6\14\5\0\1\125"+
    "\30\0\1\126\20\0\1\125\5\0\1\51\1\14\1\52"+
    "\6\0\4\14\1\0\3\14\1\0\6\14\1\0\6\14"+
    "\13\0\1\51\1\14\1\52\6\0\3\14\1\127\1\0"+
    "\3\14\1\0\6\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\3\14\1\0\1\14\1\130"+
    "\4\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\2\14\1\131\1\14\1\0\3\14\1\0\6\14\1\0"+
    "\6\14\13\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\4\14\1\132\1\14\1\0\6\14\13\0"+
    "\1\51\1\14\1\52\6\0\4\14\1\0\1\14\1\133"+
    "\1\14\1\0\6\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\1\134\3\14\1\0\3\14\1\0\6\14"+
    "\1\0\6\14\26\0\1\135\36\0\1\51\1\14\1\52"+
    "\6\0\2\14\1\136\1\14\1\0\3\14\1\0\6\14"+
    "\1\0\6\14\13\0\1\51\1\14\1\52\6\0\1\137"+
    "\3\14\1\0\3\14\1\0\6\14\1\0\6\14\13\0"+
    "\1\51\1\14\1\52\6\0\4\14\1\0\3\14\1\0"+
    "\1\14\1\140\4\14\1\0\6\14\13\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\3\14\1\0\6\14\1\141"+
    "\1\142\5\14\13\0\1\51\1\14\1\52\6\0\4\14"+
    "\1\0\3\14\1\0\2\14\1\143\3\14\1\0\6\14"+
    "\13\0\1\51\1\14\1\52\6\0\3\14\1\144\1\0"+
    "\3\14\1\0\6\14\1\0\6\14\13\0\1\51\2\111"+
    "\6\0\4\111\1\0\3\111\1\0\6\111\1\0\6\111"+
    "\13\0\1\51\1\14\1\52\6\0\4\14\1\0\3\14"+
    "\1\0\5\14\1\145\1\0\6\14\36\0\1\146\26\0"+
    "\1\51\1\14\1\52\6\0\4\14\1\0\3\14\1\0"+
    "\1\14\1\147\4\14\1\0\6\14\27\0\1\150\4\0"+
    "\2\151\27\0\1\51\1\14\1\52\6\0\3\14\1\152"+
    "\1\0\3\14\1\151\1\153\5\14\1\0\6\14\13\0"+
    "\1\154\1\14\1\52\6\0\4\14\1\0\3\14\1\0"+
    "\6\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\4\14\1\155\1\14\1\0"+
    "\6\14\24\0\1\156\54\0\1\157\35\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\1\14\1\160\1\14\1\0"+
    "\6\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\3\14\1\0\6\14\1\161\6\14\13\0"+
    "\1\51\1\14\1\52\6\0\4\14\1\0\3\14\1\0"+
    "\6\14\1\0\2\14\1\162\3\14\13\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\3\14\1\0\6\14\1\0"+
    "\1\14\1\163\4\14\34\0\2\164\27\0\1\51\1\14"+
    "\1\52\6\0\4\14\1\0\3\14\1\164\6\14\1\0"+
    "\6\14\13\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\6\14\1\0\2\14\1\165\3\14\27\0"+
    "\1\166\35\0\1\51\1\14\1\52\6\0\3\14\1\167"+
    "\1\0\3\14\1\0\6\14\1\0\6\14\13\0\1\51"+
    "\1\14\1\52\6\0\4\14\1\0\3\14\1\170\1\171"+
    "\5\14\1\0\6\14\13\0\1\51\1\14\1\52\6\0"+
    "\4\14\1\0\1\14\1\172\1\14\1\0\6\14\1\0"+
    "\6\14\13\0\1\51\1\14\1\52\6\0\2\14\1\173"+
    "\1\14\1\0\3\14\1\0\6\14\1\0\6\14\40\0"+
    "\1\174\24\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\3\14\1\175\2\14\1\0\6\14\14\0"+
    "\2\111\6\0\4\111\1\0\3\111\1\0\4\111\1\176"+
    "\1\111\1\0\6\111\42\0\1\177\46\0\1\200\41\0"+
    "\1\201\35\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\1\14\1\202\4\14\1\0\6\14\32\0"+
    "\1\203\32\0\1\51\1\14\1\52\6\0\3\14\1\204"+
    "\1\0\3\14\1\0\6\14\1\0\6\14\32\0\1\205"+
    "\32\0\1\51\1\14\1\52\6\0\4\14\1\0\1\14"+
    "\1\206\1\14\1\0\6\14\1\0\6\14\13\0\1\51"+
    "\1\14\1\52\6\0\4\14\1\0\1\14\1\207\1\14"+
    "\1\0\6\14\1\0\6\14\13\0\1\51\2\111\6\0"+
    "\4\111\1\0\3\111\1\210\1\211\5\111\1\0\6\111"+
    "\36\0\1\212\42\0\1\213\35\0\1\51\1\14\1\52"+
    "\6\0\4\14\1\0\3\14\1\214\1\215\5\14\1\0"+
    "\6\14\37\0\1\216\25\0\1\51\1\14\1\52\6\0"+
    "\1\14\1\217\2\14\1\0\3\14\1\0\6\14\1\0"+
    "\6\14\32\0\1\220\32\0\1\51\2\111\6\0\4\111"+
    "\1\0\1\111\1\221\1\111\1\0\6\111\1\0\6\111"+
    "\26\0\1\222\47\0\1\223\40\0\1\51\1\14\1\52"+
    "\6\0\1\224\3\14\1\0\3\14\1\0\6\14\1\0"+
    "\6\14\13\0\1\51\1\14\1\52\6\0\4\14\1\0"+
    "\3\14\1\0\5\14\1\225\1\0\6\14\27\0\1\226"+
    "\35\0\1\51\2\111\6\0\3\111\1\227\1\0\3\111"+
    "\1\0\6\111\1\0\6\111\32\0\1\230\32\0\1\51"+
    "\1\14\1\52\6\0\4\14\1\0\1\14\1\231\1\14"+
    "\1\0\6\14\1\0\6\14\13\0\1\51\1\14\1\52"+
    "\6\0\2\14\1\232\1\14\1\0\3\14\1\0\6\14"+
    "\1\0\6\14\13\0\1\51\1\14\1\52\6\0\3\14"+
    "\1\233\1\0\3\14\1\0\6\14\1\0\6\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4410];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\2\11\1\1\2\11\5\1\2\11"+
    "\23\1\4\11\1\0\1\1\2\0\1\11\11\1\2\11"+
    "\11\1\1\0\13\1\1\0\1\1\1\0\4\1\2\0"+
    "\6\1\1\0\3\1\1\0\4\1\1\11\1\1\1\11"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\3\1\1\11\2\1"+
    "\2\0\1\11\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\2\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\11\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    
    public static ArrayList<String> lexicalErrors = new ArrayList<String>();    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Lex error: " + yytext() + "on line " + (yyline+1) + "and column " + (yycolumn+1)+".");
					lexicalErrors.add(("Lex error: " + yytext() + "on line " + (yyline+1) + "and column " + (yycolumn+1)+"."));
            } 
            // fall through
          case 45: break;
          case 2: 
            { System.out.println(yytext() +"\t\t <SEMIC>");  return symbol(sym.SEMIC,yytext());
            } 
            // fall through
          case 46: break;
          case 3: 
            { System.out.println(yytext() +"\t\t <COLON>");  return symbol(sym.COLON,yytext());
            } 
            // fall through
          case 47: break;
          case 4: 
            { 
            } 
            // fall through
          case 48: break;
          case 5: 
            { System.out.println(yytext() +"\t\t <COMMA>");  return symbol(sym.COMMA,yytext());
            } 
            // fall through
          case 49: break;
          case 6: 
            { System.out.println(yytext() +"\t\t <EQUAL>");  return symbol(sym.EQUAL,yytext());
            } 
            // fall through
          case 50: break;
          case 7: 
            { System.out.println(yytext() +"\t\t <LEFTP>");  return symbol(sym.LEFTP,yytext());
            } 
            // fall through
          case 51: break;
          case 8: 
            { System.out.println(yytext() +"\t\t <RIGHTP>");  return symbol(sym.RIGHTP,yytext());
            } 
            // fall through
          case 52: break;
          case 9: 
            { System.out.println(yytext() +"\t\t <ADDING OPERATOR>");   return symbol(sym.ADD,yytext());
            } 
            // fall through
          case 53: break;
          case 10: 
            { System.out.println(yytext() +"\t\t <ID>");  return symbol(sym.ID,yytext());
            } 
            // fall through
          case 54: break;
          case 11: 
            { System.out.println(yytext() +"\t\t <NUMBER>");  return symbol(sym.NUMBER,yytext());
            } 
            // fall through
          case 55: break;
          case 12: 
            { System.out.println(yytext() +"\t\t <MULTIPLYING OPERATOR>");   return symbol(sym.MULT,yytext());
            } 
            // fall through
          case 56: break;
          case 13: 
            { System.out.println(yytext() +"\t\t <RELATIONAL OPERATOR>");   return symbol(sym.RELATE,yytext());
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 58: break;
          case 15: 
            { System.out.println(yytext() +"\t\t <ASSIGN OPERATOR>");   return symbol(sym.ASSIGN,yytext());
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(COMMENT);
            } 
            // fall through
          case 60: break;
          case 17: 
            { System.out.println(yytext() +"\t\t <STRING>");  return symbol(sym.STRING,yytext());
            } 
            // fall through
          case 61: break;
          case 18: 
            { System.out.println(yytext() +"\t\t <IN>"); return symbol(sym.IN,yytext());
            } 
            // fall through
          case 62: break;
          case 19: 
            { System.out.println(yytext() +"\t\t <IF>");  return symbol(sym.IF,yytext());
            } 
            // fall through
          case 63: break;
          case 20: 
            { System.out.println(yytext() +"\t\t <IS>");   return symbol(sym.IS,yytext());
            } 
            // fall through
          case 64: break;
          case 21: 
            { System.out.println(yytext() +"\t\t <DECIMALS>");  return symbol(sym.DECIMALS,yytext());
            } 
            // fall through
          case 65: break;
          case 22: 
            { System.out.println(yytext() +"\t\t <OUT>");   return symbol(sym.OUT,yytext());
            } 
            // fall through
          case 66: break;
          case 23: 
            { System.out.println(yytext() +"\t\t <END>");  return symbol(sym.END,yytext());
            } 
            // fall through
          case 67: break;
          case 24: 
            { System.out.println(yytext() +"\t\t <NOT>");  return symbol(sym.NOT,yytext());
            } 
            // fall through
          case 68: break;
          case 25: 
            { System.out.println(yytext() +"\t\t <GET>");  return symbol(sym.GET,yytext());
            } 
            // fall through
          case 69: break;
          case 26: 
            { System.out.println(yytext() +"\t\t <FOR>");  return symbol(sym.FOR,yytext());
            } 
            // fall through
          case 70: break;
          case 27: 
            { System.out.println(yytext() +"\t\t <PUT>");  return symbol(sym.PUT,yytext());
            } 
            // fall through
          case 71: break;
          case 28: 
            { System.out.println(yytext() +"\t\t <EXIT>");  return symbol(sym.EXIT,yytext());
            } 
            // fall through
          case 72: break;
          case 29: 
            { System.out.println(yytext() +"\t\t <ELSE>");  return symbol(sym.ELSE,yytext());
            } 
            // fall through
          case 73: break;
          case 30: 
            { System.out.println(yytext() +"\t\t <NULL>");  return symbol(sym.NULL,yytext());
            } 
            // fall through
          case 74: break;
          case 31: 
            { System.out.println(yytext() +"\t\t <THEN>");  return symbol(sym.THEN,yytext());
            } 
            // fall through
          case 75: break;
          case 32: 
            { System.out.println(yytext() +"\t\t <LOOP>");  return symbol(sym.LOOP,yytext());
            } 
            // fall through
          case 76: break;
          case 33: 
            { System.out.println(yytext() +"\t\t <CASE>");  return symbol(sym.CASE,yytext());
            } 
            // fall through
          case 77: break;
          case 34: 
            { System.out.println(yytext() +"\t\t <WHEN>");  return symbol(sym.WHEN,yytext());
            } 
            // fall through
          case 78: break;
          case 35: 
            { System.out.println(yytext() +"\t\t <ELSEIF>");  return symbol(sym.ELIF,yytext());
            } 
            // fall through
          case 79: break;
          case 36: 
            { System.out.println(yytext() +"\t\t <Int>");  return symbol(sym.BOOL,yytext());
            } 
            // fall through
          case 80: break;
          case 37: 
            { System.out.println(yytext() +"\t\t <BEGIN>");  return symbol(sym.BEGIN,yytext());
            } 
            // fall through
          case 81: break;
          case 38: 
            { System.out.println(yytext() +"\t\t <RETURN>");  return symbol(sym.RETURN,yytext());
            } 
            // fall through
          case 82: break;
          case 39: 
            { System.out.println(yytext() +"\t\t <IN_OUT>");   return symbol(sym.IN_OUT,yytext());
            } 
            // fall through
          case 83: break;
          case 40: 
            { System.out.println(yytext() +"\t\t <STRING>");  return symbol(sym.STRINGTYPE,yytext());
            } 
            // fall through
          case 84: break;
          case 41: 
            { System.out.println(yytext() +"\t\t <Int>");  return symbol(sym.INTEGER,yytext());
            } 
            // fall through
          case 85: break;
          case 42: 
            { System.out.println(yytext() +"\t\t <NEW_LINE>");  return symbol(sym.NEW_LINE,yytext());
            } 
            // fall through
          case 86: break;
          case 43: 
            { System.out.println(yytext() +"\t\t <FUNCTION>");  return symbol(sym.FUNCTION,yytext());
            } 
            // fall through
          case 87: break;
          case 44: 
            { System.out.println(yytext() +"\t\t <PROCEDURE>");  return symbol(sym.PROCEDURE,yytext());
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
