package a95compiler;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code 
{:
    public static ArrayList<String> syntaxErrors = new ArrayList<String>();
    public void syntaxError(Symbol sm){
        System.out.println("Syntax Error: \""+ sm.value + "\" in line: " + (sm.right+1) + " column: " + (sm.left+1));
        syntaxErrors.add("Syntax Error: \""+ sm.value + "\" in line: " + (sm.right+1) + " column: " + (sm.left+1));
    }
    public static Node tree;
    public static int count = 0;
    public static int temp = 0;
:}

/* Terminals */
terminal PROCEDURE, FUNCTION, RETURN, IS, BEGIN, END, IF, THEN, ELSE, ELIF, FOR, IN, OUT, IN_OUT, LOOP,CASE;
terminal ID, NUMBER, STRING, DECIMALS;
terminal EXIT,WHEN,NULL,GET,PUT;
terminal INTEGER,STRINGTYPE, FLOAT,BOOL;
terminal SEMIC, COLON, COMMA, NEW_LINE;
terminal EQUAL, ASSIGN, LOGIC_OP, RELATE, MULT, ADD, LEFTP, RIGHTP, NOT;


/* No terminals */
non terminal INIT, MAIN, ROOT, PROGRAM;


/* Operators precedence */
precedence left ADD;
precedence left RELATE;
precedence left MULT;


/* Grammar */

start with INIT;

INIT                    ::=   ROOT:child   {: 
                                /*Utilizado para declarar el nodo padre o root*/
                                Node node = new Node("ROOT",parser.count);
                                parser.count++;
                                node.pushChild((Node) child);
                                parser.tree = (Node) node;
                                RESULT = node;
                            :}
                        ;

ROOT                    ::= PROCEDURE ID:no2 IS MAIN:child1 BEGIN PROGRAM:child2 END ID SEMIC {:
                                Node startP = new Node("MAIN", parser.count);
                                parser.count++;
                                Node nodeID = new Node("ID", no2.toString(),parser.count);
                                parser.count++;
                                nodeID.pushChild((Node)child1);
                                nodeID.pushChild((Node)child2);
                                startP.pushChild(nodeID);               
                                RESULT = startP;
                            :}
                        |error SEMIC
                        ;