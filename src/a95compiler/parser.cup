package a95compiler;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code 
{:
    public static ArrayList<String> syntaxErrors = new ArrayList<String>();
    public void syntaxError(Symbol sm){
        System.out.println("Syntax Error: \""+ sm.value + "\" Linea: " + (sm.right+1) + " Columna: " + (sm.left+1));
        syntaxErrors.add("Syntax Error: \""+ sm.value + "\" Linea: " + (sm.right+1) + " Columna: " + (sm.left+1));
    }
:}

/* Terminals */
terminal PROCEDURE, FUNCTION, RETURN, IS, BEGIN, END, IF, THEN, ELSE, ELIF, FOR, IN, OUT, IN_OUT, LOOP,CASE;
terminal ID, NUMBER, STRING, DECIMALS;
terminal EXIT,WHEN,NULL,GET,PUT;
terminal INTEGER,STRINGTYPE, FLOAT,BOOL;
terminal SEMIC, COLON, COMMA, NEW_LINE;
terminal EQUAL, ASSIGN, LOGIC_OP, RELATE, MULT, ADD, LEFTP, RIGHTP, NOT;


/* No terminals */
non terminal INIT, MAIN;


/* Operators precedence */
precedence left ADD;
precedence left RELATE;
precedence left MULT;


/* Grammar */

start with INIT;

INIT                 ::=   MAIN:root   {: System.out.println("Hi"); RESULT=1;:}
                            ;
MAIN                ::=   PROCEDURE:node1 ID:node2 IS:node3 {:System.out.println("Hi 2"); RESULT=2;:}
                            ;